{"version":3,"sources":["Box.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","handleClick","bind","evt","this","flipBoxesAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","flipBoxesAround","i","nRows","row","j","nCols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","col","flipBox","every","box","setState","starterBoard","currRow","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAuBeA,G,kBAnBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,yEAKPC,GACVC,KAAKJ,MAAMK,sB,+BAIX,IAAIC,EAAU,OAASF,KAAKJ,MAAMO,MAAQ,WAAa,IAEvD,OACI,wBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAd5BS,cCCZC,G,kBAOJ,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KACDY,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eAEd,EAAKA,YAAc,EAAKA,YAAYb,KAAjB,gBACnB,EAAKc,gBAAkB,EAAKA,gBAAgBd,KAArB,gBAPN,E,2EAYjB,IADA,IAAIY,EAAQ,GACHG,EAAI,EAAGA,EAAIb,KAAKJ,MAAMkB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIhB,KAAKJ,MAAMqB,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWpB,KAAKJ,MAAMyB,qBAEtCX,EAAMQ,KAAKH,GAEb,OAAOL,I,sCAGOY,GAAQ,IAAD,EACAtB,KAAKJ,MAArBqB,EADgB,EAChBA,MAAOH,EADS,EACTA,MACRJ,EAAQV,KAAKQ,MAAME,MAFF,EAGJY,EAAMC,MAAM,KAAKC,IAAIC,QAHjB,mBAGhBV,EAHgB,KAGXW,EAHW,KAKrB,SAASC,EAAQZ,EAAKW,GAEhBX,GAAO,GAAKA,EAAMD,GAASY,GAAO,GAAKA,EAAMT,IAC/CP,EAAMK,GAAKW,IAAQhB,EAAMK,GAAKW,IAKlCC,EAAQZ,EAAKW,GACbC,EAASZ,EAAM,EAAIW,GACnBC,EAAQZ,EAAMW,EAAM,GACpBC,EAASZ,EAAK,EAAIW,GAClBC,EAAQZ,EAAMW,EAAM,GAEpB,IAAIjB,EAASC,EAAMkB,OAAM,SAAAb,GAAG,OAAIA,EAAIa,OAAM,SAAAC,GAAG,OAAKA,QAElD7B,KAAK8B,SAAS,CAACpB,QAAOD,a,+BAKtB,IAFQ,IAAD,OACHsB,EAAe,GACVhB,EAAM,EAAGA,EAAMf,KAAKJ,MAAMkB,MAAOC,IAAO,CAE/C,IADA,IAAIiB,EAAU,GADiC,WAEtCN,GACP,IAAIJ,EAAK,UAAMP,EAAN,YAAaW,GACtBM,EAAQd,KACN,kBAAC,EAAD,CACEe,IAAKX,EACLnB,MAAO,EAAKK,MAAME,MAAMK,GAAKW,GAC7BzB,kBAAmB,kBAAM,EAAKW,gBAAgBU,QAN3CI,EAAM,EAAGA,EAAM1B,KAAKJ,MAAMqB,MAAOS,IAAQ,EAAzCA,GASTK,EAAab,KAAK,4BAAKc,IAGzB,OACE,yBAAK5B,UAAU,SACZJ,KAAKQ,MAAMC,OACZ,yBAAKL,UAAU,eACb,yBAAKA,UAAU,gBAAe,+BAAI,mCAAc,oCAAlB,IAAkC,mCAAlC,OAGhC,6BACE,yBAAKA,UAAU,eAAc,+BAAI,mCAAc,oCAAlB,IAAkC,qCAAlC,OAC7B,2BAAOA,UAAU,eACf,+BACG2B,U,GAhFKzB,cAAdC,EACG2B,aAAe,CACpBpB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAuFVd,QCjFA4B,G,uLARX,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5f462534.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Box.css\"\n\nclass Box extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    this.props.flipBoxesAroundMe();\n  }\n\n  render() {\n    let classes = \"Box\" + (this.props.isLit ? \" Box-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Box;","import React, {Component} from \"react\";\nimport Box from \"./Box\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this);\n    this.flipBoxesAround = this.flipBoxesAround.bind(this);\n  }\n  \n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nRows; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.nCols; j++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  flipBoxesAround(coord) {\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let [row, col] = coord.split(\"-\").map(Number);\n\n    function flipBox(row, col) {\n      // if this coord is actually on board, flip it\n      if (row >= 0 && row < nRows && col >= 0 && col < nCols) {\n        board[row][col] = !board[row][col];\n      }\n    }\n    \n    //flip this box and the boxes around it\n    flipBox(row, col);\n    flipBox((row + 1), col);\n    flipBox(row, (col + 1));\n    flipBox((row -1), col);\n    flipBox(row, (col - 1));\n\n    let hasWon = board.every(row => row.every(box => !box));\n\n    this.setState({board, hasWon});\n  }\n\n  render() {\n    let starterBoard = [];\n    for (let row = 0; row < this.props.nRows; row++) {\n      let currRow = [];\n      for (let col = 0; col < this.props.nCols; col++) {\n        let coord = `${row}-${col}`\n        currRow.push(\n          <Box \n            key={coord} \n            isLit={this.state.board[row][col]} \n            flipBoxesAroundMe={() => this.flipBoxesAround(coord)}\n          />)\n      }\n      starterBoard.push(<tr>{currRow}</tr>)\n    }\n\n    return (\n      <div className='Board'>\n        {this.state.hasWon ?\n        <div className='Board-title'>\n          <div className='Board-winner'><b>W<span>I</span><span>NN</span>E<span>R</span>!</b></div>\n        </div> \n        :\n        <div>\n          <div className='Board-title'><b>L<span>I</span><span>GH</span>T<span>S O</span>UT</b></div>\n          <table className='Board-table'>\n            <tbody>\n              {starterBoard}\n            </tbody>\n          </table>\n        </div>\n        \n        }\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}